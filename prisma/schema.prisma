generator client {
	provider = "prisma-client-js"
}

datasource db {
	provider = "sqlite"
	url      = env("DATABASE_URL")
}


model User {
	id String @id

	isAdmin Boolean @default(false)

	session     String?
	accounts    Account[]
	predictions Prediction[]
	wagers      Wager[]
}


model Account {
	guild   Guild  @relation(fields: [guildID], references: [id], onDelete: Cascade)
	guildID String
	user    User   @relation(fields: [userID], references: [id], onDelete: Cascade)
	userID  String

	balance Int    @default(1000)

	@@unique([guildID, userID])
}

model Guild {
	id          String  @id

	kitty       Int     @default(0)
	hide        Boolean @default(false)

	restricted  Boolean @default(false)
	start_balance   Int @default(100)

	accounts    Account[]
	predictions Prediction[]

	adminRoles  AdminRoles[]
	adminUsers  AdminUsers[]
}

model AdminUsers {
	guild   Guild  @relation(fields: [guildID], references: [id], onDelete: Cascade)
	guildID String
	userID  String

	@@unique([guildID, userID])
}

model AdminRoles {
	guild   Guild  @relation(fields: [guildID], references: [id], onDelete: Cascade)
	guildID String
	roleID  String

	@@unique([guildID, roleID])
}




model Prediction {
	id          String @id
	status      String @default("OPEN")

	author      User   @relation(fields: [authorID], references: [id], onDelete: Cascade)
	authorID    String
	guild       Guild  @relation(fields: [guildID], references: [id], onDelete: Cascade)
	guildID     String
	channelID   String

	title       String
	image       String
	description String

	answer      Int

	createdAt   DateTime @default(now())
	updatedAt   DateTime @default(now()) @updatedAt

	options     PredictionOption[]
	wagers      Wager[]
}

model PredictionOption {
	index        Int
	prediction   Prediction @relation(fields: [predictionID], references: [id], onDelete: Cascade)
	predictionID String

	correct      Boolean    @default(false)
	text         String

	wagers       Wager[]

	@@unique([index, predictionID])
}

model Wager {
	prediction   Prediction @relation(fields: [predictionID], references: [id], onDelete: Cascade)
	predictionID String

	user   User   @relation(fields: [userID], references: [id], onDelete: Cascade)
	userID String

	option PredictionOption @relation(fields: [choice, predictionID], references: [index, predictionID], onDelete: Cascade)
	choice Int

	amount Int
	payout Int @default(0)

	@@unique([predictionID, userID])
}
