datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
	provider = "prisma-client-js"
}


model User {
	id String @id

	accounts    Account[]
	predictions Prediction[]
	wagers      Wager[]
}


model Account {
	guild   Guild @relation(fields: [guildID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	guildID String
	user    User  @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userID  String

	balance Float @default(100)

	@@unique([guildID, userID])
}


model Guild {
	id String @id

	kitty Float @default(0)

	accounts       Account[]
	predictions Prediction[]
}




model Prediction {
	id String @id
	status String @default("OPEN")

	author   User  @relation(fields: [authorID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	authorID String
	guild    Guild  @relation(fields: [guildID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	guildID  String

	title       String
	description String

	answer Int

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	options PredictionOption[]
	wagers  Wager[]
}

model PredictionOption {
	index        Int
	prediction   Prediction  @relation(fields: [predictionID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	predictionID String

	text String

	wagers Wager[]
	@@unique([index, predictionID])
}

model Wager {
	prediction   Prediction  @relation(fields: [predictionID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	predictionID String
	user         User        @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userID       String

	choice Int
	amount Float

	option PredictionOption @relation(fields: [choice, predictionID], references: [index, predictionID], onDelete: Cascade, onUpdate: Cascade)
	@@unique([predictionID, userID])
}